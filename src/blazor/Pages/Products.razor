@page "/products"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16p;
        text-decoration: none;
        transition: backgrond-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>


<h3>Products from Postgress onCloud</h3>

<div class="row">
    <div class="col">
        <button @onclick="AddProduct" class="btn btn-success">Add New Product</button>
    </div>
    <div class="col-md-auto">
        <input type="text" class="form-control mb-2 mr-sm-2" @bind="searchProduct"
            placeholder="Search by product" />
    </div>
    <div class="col col-lg-2">
        <button type="button" class="btn btn-warning mr-sm-1 mb-2"
            @onclick="@(async() => await SearchProducts())">
            Search
        </button>

    </div>
</div>

@if(products!.Count <= 0)
{
    <p><em>@messageLoading</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>
                        <button @onclick="() => EditProduct(product.Id)" class="btn btn-primary">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn btn-custom" @onclick="@(async () => NavigateToPage("previous"))">Previous</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom @(currentPage==curPage ? "btn-danger" : "")"
                @onclick="@(async () => await RefreshRecord(currentPage))">
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick="@(async () => NavigateToPage("next"))">Next</button>

    </div>

}

@code {

    List<blazor.Models.Product>? products = new List<blazor.Models.Product>();
    private string searchProduct = string.Empty;
    private int totalRecords = 0;
    private int totalPages = 0;
    private int curPage = 0;
    private int pageSize = 0;
    private int startPage;
    private int endPage;
    private string messageLoading = "Loading Products...";


    public async Task RefreshRecord(int currentPage)
    {
        curPage = currentPage;
        searchProduct = searchProduct.Trim();

        blazor.Models.Pagination pagination = (
            await Http.GetFromJsonAsync<blazor.Models.Pagination>($@"
                /api/product/pagination?pageNumber={curPage}&search={searchProduct}")
        )!;

        products = pagination!.Results;

        totalRecords = pagination.TotalNumberOfRecords;
        totalPages = pagination.TotalNumberOfPages;

        this.StateHasChanged();
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }

        RefreshRecord(curPage).GetAwaiter();
    }

    public async Task SearchProducts()
    {
        pageSize = 10;
        curPage = 1;

        searchProduct = searchProduct.Trim();

        blazor.Models.Pagination pagination = (
           await Http.GetFromJsonAsync<blazor.Models.Pagination>($@"
                /api/product/pagination?pageNumber={curPage}&search={searchProduct}")
        )!;

        products = pagination!.Results;

        if (!products.Any())
        {
            messageLoading = "Products does not exist with that criteria";
        }

        totalRecords = pagination.TotalNumberOfRecords;
        totalPages = pagination.TotalNumberOfPages;

        startPage = 1;
        if ( (endPage + pageSize) < totalPages) 
        {
            endPage = startPage + pageSize - 1;
        }
        else
        {
            endPage = totalPages;
        }

        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if ( (endPage+pageSize) < totalPages)
            {
                endPage = startPage + pageSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pageSize;
        }
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        curPage = 1;
        pageSize = 10;

        //products = await Http.GetFromJsonAsync<List<blazor.Models.Product>>("/api/product");
        blazor.Models.Pagination pagination = (await
            Http.GetFromJsonAsync<blazor.Models.Pagination>("/api/product/pagination"))!;
        // http://localhost:5000/api/product/pagination?OrderBy=Name&OrderAsc=true&PageNumber=1&search=Metal

        products = pagination.Results;
        totalRecords = pagination.TotalNumberOfRecords;
        totalPages = pagination.TotalNumberOfPages;
        SetPagerSize("forward");

    }

    void AddProduct()
    {
        NavigationManager.NavigateTo("/product");
    }

    void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/product/{id}");
    }

}
